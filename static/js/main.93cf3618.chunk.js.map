{"version":3,"sources":["Algorithms/helper/IsEqual.js","Algorithms/helper/swap.js","Algorithms/BubbleSort.js","Algorithms/SelectionSort.js","Algorithms/QuickSort.js","Algorithms/InsertionSort.js","Algorithms/MergeSort.js","Algorithms/BinaryInsertionSort.js","Algorithms/RadixSort.js","Algorithms/HeapSort.js","Algorithms/CocktailSort.js","Visualizer/Visualizer.jsx","App.js","index.js"],"names":["isEqual","firstArray","secondArray","length","i","swap","auxillaryArray","firstIndex","secondIndex","temp","getBubbleSortAnimations","array","animations","slice","j","push","bubbleSort","sortedArray","sort","a","b","console","log","getSelectionSortAnimations","minIndex","selectionSort","getQuickSortAnimations","quickSort","startIndex","endIndex","pivotIndex","pivot","partitionArray","getInsertionSortAnimations","insertionSort","getMergeSortAnimations","MergeSort","left","right","mid","Math","floor","l","m","r","index","Merge","getBinaryInsertionSortAnimations","loc","selected","binarySearch","binaryInsertionSort","item","low","high","getRadixSortAnimations","count","mx","c","RadixSort","getHeapSortAnimations","size","newJ","HeapSort","getCocktailSortAnimations","swapped","start","end","cocktailSort","window_width","window","innerWidth","window_height","innerHeight","size_of_array","parseInt","onresize","Animation_speed_ms","Visualizer","props","state","algorithmSets","dotPick","this","resetArray","setState","min","max","random","restoreButtons","algorithmName","document","getElementById","disabled","buttonStyle","style","background","color","cursor","shuffButton","modeButton","sortingAlgorithm","disableSortButtons","isColorChange","arrayBars","getElementsByClassName","dots","barOneIndex","barTwoIndex","dotOne","dotTwo","barOneStyle","barTwoStyle","setTimeout","backgroundColor","height","width","barIndex","newHeight","barStyle","Restore_time","restoreShffling","className","position","map","value","idx","key","id","top","onClick","selectMode","React","Component","App","ReactDOM","render"],"mappings":"wQAAO,SAASA,EAAQC,EAAYC,GAClC,GAAID,EAAWE,SAAWD,EAAYC,OACpC,OAAO,EAET,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAWE,OAAQC,IACrC,GAAIH,EAAWG,KAAOF,EAAYE,GAChC,OAAO,EAGX,OAAO,ECTF,SAASC,EAAKC,EAAgBC,EAAYC,GAC/C,IAAIC,EAAOH,EAAeC,GAC1BD,EAAeC,GAAcD,EAAeE,GAC5CF,EAAeE,GAAeC,ECDzB,SAASC,EAAwBC,GACtC,IAAIC,EAAa,GACbN,EAAiBK,EAAME,SAO7B,SAAoBP,EAAgBM,GAElC,IADA,IAAMT,EAASG,EAAeH,OACrBC,EAAI,EAAGA,EAAID,EAAS,EAAGC,IAC9B,IAAK,IAAIU,EAAI,EAAGA,EAAIX,EAASC,EAAI,EAAGU,IAClCF,EAAWG,KAAK,CAAC,eAAgBD,EAAGA,EAAI,IACxCF,EAAWG,KAAK,CAAC,eAAgBD,EAAI,EAAGA,IACxCF,EAAWG,KAAK,CAAC,eAAgBD,EAAGA,EAAI,IACxCF,EAAWG,KAAK,CAAC,eAAgBD,EAAI,EAAGA,IAEpCR,EAAeQ,GAAKR,EAAeQ,EAAI,KACzCF,EAAWG,KAAK,CAAC,OAAQD,EAAGR,EAAeQ,EAAI,KAC/CF,EAAWG,KAAK,CAAC,OAAQD,EAAI,EAAGR,EAAeQ,KAC/CT,EAAKC,EAAgBQ,EAAGA,EAAI,IAlBlCE,CAAWV,EAAgBM,GAC3B,IAAMK,EAAcN,EAAME,QAAQK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAErD,OADAC,QAAQC,IAAI,yBAA0BtB,EAAQiB,EAAaX,IACpDM,ECLF,SAASW,EAA2BZ,GACzC,IAAIC,EAAa,GACbN,EAAiBK,EAAME,SAO7B,SAAuBP,EAAgBM,GAErC,IADA,IAAMT,EAASG,EAAeH,OACrBC,EAAI,EAAGA,EAAID,EAAS,EAAGC,IAAK,CAEnC,IADA,IAAIoB,EAAWpB,EACNU,EAAIV,EAAI,EAAGU,EAAIX,EAAQW,IAC9BF,EAAWG,KAAK,CAAC,eAAgBD,EAAGU,IACpCZ,EAAWG,KAAK,CAAC,eAAgBS,EAAUV,IAC3CF,EAAWG,KAAK,CAAC,eAAgBD,EAAGU,IACpCZ,EAAWG,KAAK,CAAC,eAAgBS,EAAUV,IAEvCR,EAAeQ,GAAKR,EAAekB,KACrCA,EAAWV,GAGfF,EAAWG,KAAK,CAAC,eAAgBX,EAAGoB,IACpCZ,EAAWG,KAAK,CAAC,eAAgBS,EAAUpB,IAC3CQ,EAAWG,KAAK,CAAC,eAAgBX,EAAGoB,IACpCZ,EAAWG,KAAK,CAAC,eAAgBS,EAAUpB,IAC3CQ,EAAWG,KAAK,CAAC,OAAQS,EAAUlB,EAAeF,KAClDQ,EAAWG,KAAK,CAAC,OAAQX,EAAGE,EAAekB,KAE3CnB,EAAKC,EAAgBkB,EAAUpB,IA3BjCqB,CAAcnB,EAAgBM,GAC9B,IAAMK,EAAcN,EAAME,QAAQK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAErD,OADAC,QAAQC,IAAI,yBAA0BtB,EAAQiB,EAAaX,IACpDM,ECNF,SAASc,EAAuBf,GACrC,IAAIC,EAAa,GACbN,EAAiBK,EAAME,SAO7B,SAASc,EAAUrB,EAAgBsB,EAAYC,EAAUjB,GACvD,IAAIkB,EACAF,EAAaC,IACfC,EAWJ,SAAwBxB,EAAgBsB,EAAYC,EAAUjB,GAG5D,IAFA,IAAImB,EAAQzB,EAAeuB,GACvBC,EAAaF,EACRxB,EAAIwB,EAAYxB,GAAKyB,EAAW,EAAGzB,IAC1CQ,EAAWG,KAAK,CAAC,eAAgBX,EAAGyB,IACpCjB,EAAWG,KAAK,CAAC,eAAgBX,EAAGyB,IAEpCjB,EAAWG,KAAK,CAAC,eAAgBe,EAAY1B,IAC7CQ,EAAWG,KAAK,CAAC,eAAgBe,EAAY1B,IAEzCE,EAAeF,IAAM2B,IAEvBnB,EAAWG,KAAK,CAAC,OAAQX,EAAGE,EAAewB,KAC3ClB,EAAWG,KAAK,CAAC,OAAQe,EAAYxB,EAAeF,KACpDC,EAAKC,EAAgBF,EAAG0B,GACxBA,KAOJ,OAHAlB,EAAWG,KAAK,CAAC,OAAQe,EAAYxB,EAAeuB,KACpDjB,EAAWG,KAAK,CAAC,OAAQc,EAAUvB,EAAewB,KAClDzB,EAAKC,EAAgBwB,EAAYD,GAC1BC,EAjCQE,CACX1B,EACAsB,EACAC,EACAjB,GAEFe,EAAUrB,EAAgBsB,EAAYE,EAAa,EAAGlB,GACtDe,EAAUrB,EAAgBwB,EAAa,EAAGD,EAAUjB,IAhBtDe,CAAUrB,EAAgB,EAAGA,EAAeH,OAAS,EAAGS,GACxD,IAAMK,EAAcN,EAAME,QAAQK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAErD,OADAC,QAAQC,IAAI,yBAA0BtB,EAAQiB,EAAaX,IACpDM,ECPF,SAASqB,EAA2BtB,GACzC,IAAIC,EAAa,GACbN,EAAiBK,EAAME,SAO7B,SAAuBP,EAAgBM,GAErC,IADA,IAAIT,EAASG,EAAeH,OACnBC,EAAI,EAAGA,EAAID,EAAQC,IAE1B,IADA,IAAIU,EAAIV,EACDU,EAAI,GAAKR,EAAeQ,GAAKR,EAAeQ,EAAI,IACrDF,EAAWG,KAAK,CAAC,eAAgBD,EAAI,EAAGA,IACxCF,EAAWG,KAAK,CAAC,eAAgBD,EAAGA,EAAI,IACxCF,EAAWG,KAAK,CAAC,eAAgBD,EAAI,EAAGA,IACxCF,EAAWG,KAAK,CAAC,eAAgBD,EAAGA,EAAI,IAExCF,EAAWG,KAAK,CAAC,OAAQD,EAAI,EAAGR,EAAeQ,KAC/CF,EAAWG,KAAK,CAAC,OAAQD,EAAGR,EAAeQ,EAAI,KAC/CT,EAAKC,EAAgBQ,EAAI,EAAGA,GAC5BA,GAAK,EAnBToB,CAAc5B,EAAgBM,GAC9B,IAAMK,EAAcN,EAAME,QAAQK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAErD,OADAC,QAAQC,IAAI,yBAA0BtB,EAAQiB,EAAaX,IACpDM,ECNF,SAASuB,EAAuBxB,GACrC,IAAIC,EAAa,GACbN,EAAiBK,EAAME,SAM7B,SAASuB,EAAU9B,EAAgB+B,EAAMC,EAAO1B,GAC9C,GAAIyB,EAAOC,EAAO,CAChB,IAAIC,EAAMC,KAAKC,OAAOJ,EAAOC,GAAS,GACtCF,EAAU9B,EAAgB+B,EAAME,EAAK3B,GACrCwB,EAAU9B,EAAgBiC,EAAM,EAAGD,EAAO1B,GAK9C,SAAeN,EAAgBoC,EAAGC,EAAGC,EAAGhC,GACtC,IAAIyB,EAAO/B,EAAeO,MAAM6B,EAAGC,EAAI,GACnCL,EAAQhC,EAAeO,MAAM8B,EAAI,EAAGC,EAAI,GACxCC,EAAQH,EACRtC,EAAI,EACJU,EAAI,EACR,KAAOV,EAAIiC,EAAKlC,QAAUW,EAAIwB,EAAMnC,QAG9BkC,EAAKjC,GAAKkC,EAAMxB,IAClBF,EAAWG,KAAK,CAAC,eAAgB8B,EAAOzC,IACxCQ,EAAWG,KAAK,CAAC,eAAgBX,EAAGyC,IACpCjC,EAAWG,KAAK,CAAC,eAAgB8B,EAAOzC,IACxCQ,EAAWG,KAAK,CAAC,eAAgBX,EAAGyC,IAEpCjC,EAAWG,KAAK,CAAC,OAAQ8B,EAAOR,EAAKjC,KACrCE,EAAeuC,GAASR,EAAKjC,GAC7BA,GAAK,IAELQ,EAAWG,KAAK,CAAC,eAAgB8B,EAAO/B,IACxCF,EAAWG,KAAK,CAAC,eAAgBD,EAAG+B,IACpCjC,EAAWG,KAAK,CAAC,eAAgB8B,EAAO/B,IACxCF,EAAWG,KAAK,CAAC,eAAgBD,EAAG+B,IAEpCjC,EAAWG,KAAK,CAAC,OAAQ8B,EAAOP,EAAMxB,KACtCR,EAAeuC,GAASP,EAAMxB,GAC9BA,GAAK,GAEP+B,GAAS,EAEX,KAAOzC,EAAIiC,EAAKlC,QACdS,EAAWG,KAAK,CAAC,OAAQ8B,EAAOR,EAAKjC,KACrCE,EAAeuC,GAASR,EAAKjC,GAC7BA,GAAK,EACLyC,GAAS,EAEX,KAAO/B,EAAIwB,EAAMnC,QACfS,EAAWG,KAAK,CAAC,OAAQ8B,EAAOP,EAAMxB,KACtCR,EAAeuC,GAASP,EAAMxB,GAC9BA,GAAK,EACL+B,GAAS,EA5CTC,CAAMxC,EAAgB+B,EAAME,EAAKD,EAAO1B,IAV1CwB,CAAU9B,EAAgB,EAAGA,EAAeH,OAAS,EAAGS,GACxD,IAAMK,EAAcN,EAAME,QAAQK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAErD,OADAC,QAAQC,IAAI,yBAA0BtB,EAAQiB,EAAaX,IACpDM,ECNF,SAASmC,EAAiCpC,GAC/C,IAAIC,EAAa,GACbN,EAAiBK,EAAME,SAM7B,SAA6BP,EAAgBM,GAC3C,IAAIR,EAAG4C,EAAKlC,EAAGmC,EACf,IAAK7C,EAAI,EAAGA,EAAIE,EAAeH,OAAQC,IAAK,CAI1C,IAHAU,EAAIV,EAAI,EACR6C,EAAW3C,EAAeF,GAC1B4C,EAAME,EAAa5C,EAAgB2C,EAAU,EAAGnC,GACzCA,GAAKkC,GACVpC,EAAWG,KAAK,CAAC,eAAgBD,EAAGkC,IACpCpC,EAAWG,KAAK,CAAC,eAAgBiC,EAAKlC,IACtCF,EAAWG,KAAK,CAAC,eAAgBD,EAAGkC,IACpCpC,EAAWG,KAAK,CAAC,eAAgBiC,EAAKlC,IACtCF,EAAWG,KAAK,CAAC,OAAQD,EAAI,EAAGR,EAAeQ,KAC/CR,EAAeQ,EAAI,GAAKR,EAAeQ,GACvCA,GAAK,EAEPF,EAAWG,KAAK,CAAC,OAAQD,EAAI,EAAGmC,IAChC3C,EAAeQ,EAAI,GAAKmC,GArB1BE,CAAoB7C,EAAgBM,GACpC,IAAMK,EAAcN,EAAME,QAAQK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAErD,OADAC,QAAQC,IAAI,yBAA0BtB,EAAQiB,EAAaX,IACpDM,EAqBT,SAASsC,EAAa5C,EAAgB8C,EAAMC,EAAKC,GAC/C,GAAIA,GAAQD,EACV,OAAID,EAAO9C,EAAe+C,GACjBA,EAAM,EAERA,EAET,IAAId,EAAMC,KAAKC,OAAOa,EAAOD,GAAO,GACpC,OAAID,IAAS9C,EAAeiC,GACnBA,EAAM,EAEXa,EAAO9C,EAAeiC,GACjBW,EAAa5C,EAAgB8C,EAAMb,EAAM,EAAGe,GAE9CJ,EAAa5C,EAAgB8C,EAAMC,EAAKd,EAAM,GCzChD,SAASgB,EAAuB5C,GACrC,IAAIC,EAAa,GACbN,EAAiBK,EAAME,SAM7B,SAAmBP,EAAgBM,GAIjC,IAHA,IAAI4C,EAAQ,GACRC,EAAKnD,EAAe,GACpBoD,EAAI,EACCtD,EAAI,EAAGA,EAAIE,EAAeH,SAAUC,EACvCE,EAAeF,GAAKqD,IACtBA,EAAKnD,EAAeF,IAGxB,IAAK,IAAIuC,EAAI,EAAGH,KAAKC,MAAMgB,EAAKd,GAAK,EAAGA,GAAK,GAAI,CAC/Ca,EAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7C,IAAK,IAAIpD,EAAI,EAAGA,EAAIE,EAAeH,OAAQC,IAAK,CAC9C,IAAIK,EAAO+B,KAAKC,MAAMnC,EAAeF,GAAKuC,GAAK,GAC/Ca,EAAM/C,GAAMM,KAAKT,EAAeF,IAChCQ,EAAWG,KAAK,CAAC,eAAgBX,EAAGK,IACpCG,EAAWG,KAAK,CAAC,eAAgBN,EAAML,IACvCQ,EAAWG,KAAK,CAAC,eAAgBX,EAAGK,IACpCG,EAAWG,KAAK,CAAC,eAAgBN,EAAML,IAEzCsD,EAAI,EACJ,IAAK,IAAItD,EAAI,EAAGA,EAAI,KAAMA,EACxB,IAAK,IAAIU,EAAI,EAAGA,EAAI0C,EAAMpD,GAAGD,SAAUW,EACrCF,EAAWG,KAAK,CAAC,eAAgB2C,EAAGtD,EAAIU,IACxCF,EAAWG,KAAK,CAAC,eAAgBX,EAAIU,EAAG4C,IACxC9C,EAAWG,KAAK,CAAC,eAAgB2C,EAAGtD,EAAIU,IACxCF,EAAWG,KAAK,CAAC,eAAgBX,EAAIU,EAAG4C,IACxC9C,EAAWG,KAAK,CAAC,OAAQ2C,EAAGF,EAAMpD,GAAGU,KACrCR,EAAeoD,GAAKF,EAAMpD,GAAGU,KAC3B4C,GAjCRC,CAAUrD,EAAgBM,GAC1B,IAAMK,EAAcN,EAAME,QAAQK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAErD,OADAC,QAAQC,IAAI,yBAA0BtB,EAAQiB,EAAaX,IACpDM,ECLF,SAASgD,EAAsBjD,GACpC,IAAIC,EAAa,GACbN,EAAiBK,EAAME,SAQ7B,SAAkBP,EAAgBuD,EAAMjD,GAEtC,IADA,IAAIyB,EAAMC,EAAOxB,EAAGgD,EACX1D,EAAIoC,KAAKC,MAAMoB,EAAO,EAAI,GAAIzD,GAAK,IAAKA,EAAG,CAGlD,IAFAQ,EAAWG,KAAK,CAAC,eAAgBX,EAAG,IACpCU,EAAIgD,EAAO1D,EACJU,EAAI+C,IACTC,EAAOhD,EAEPwB,EAAY,EAAJxB,EAAQ,GADhBuB,EAAW,EAAJvB,EAAQ,GAEJ+C,GAAQvD,EAAe+B,GAAQ/B,EAAewD,KACvDA,EAAOzB,EACPzB,EAAWG,KAAK,CAAC,eAAgB+C,EAAMzB,IACvCzB,EAAWG,KAAK,CAAC,eAAgB+C,EAAMzB,KAErCC,EAAQuB,GAAQvD,EAAegC,GAAShC,EAAewD,KACzDA,EAAOxB,EACP1B,EAAWG,KAAK,CAAC,eAAgB+C,EAAMxB,IACvC1B,EAAWG,KAAK,CAAC,eAAgB+C,EAAMxB,KAErCwB,IAAShD,IACXF,EAAWG,KAAK,CAAC,OAAQD,EAAGR,EAAewD,KAC3ClD,EAAWG,KAAK,CAAC,OAAQ+C,EAAMxD,EAAeQ,KAC9CT,EAAKC,EAAgBQ,EAAGgD,GACxBhD,EAAIgD,EAKRlD,EAAWG,KAAK,CAAC,eAAgBX,EAAG,IAEtC,IAAK,IAAIA,EAAIyD,EAAO,EAAGzD,GAAK,IAAKA,EAAG,CAMlC,IALAQ,EAAWG,KAAK,CAAC,eAAgBX,EAAG,IACpCQ,EAAWG,KAAK,CAAC,OAAQ,EAAGT,EAAeF,KAC3CQ,EAAWG,KAAK,CAAC,OAAQX,EAAGE,EAAe,KAC3CD,EAAKC,EAAgBF,EAAG,GACxBU,EAAIgD,EAAO,EACJhD,EAAIV,IACT0D,EAAOhD,EAEPwB,EAAY,EAAJxB,EAAQ,GADhBuB,EAAW,EAAJvB,EAAQ,GAEJV,GAAKE,EAAe+B,GAAQ/B,EAAewD,KACpDlD,EAAWG,KAAK,CAAC,eAAgB+C,EAAMzB,IACvCzB,EAAWG,KAAK,CAAC,eAAgB+C,EAAMzB,IACvCyB,EAAOzB,GAELC,EAAQlC,GAAKE,EAAegC,GAAShC,EAAewD,KACtDlD,EAAWG,KAAK,CAAC,eAAgB+C,EAAMxB,IACvC1B,EAAWG,KAAK,CAAC,eAAgB+C,EAAMxB,IAEvCwB,EAAOxB,GAELwB,IAAShD,IACXF,EAAWG,KAAK,CAAC,eAAgBD,EAAGgD,IACpClD,EAAWG,KAAK,CAAC,eAAgBD,EAAGgD,IACpClD,EAAWG,KAAK,CAAC,OAAQD,EAAGR,EAAewD,KAC3ClD,EAAWG,KAAK,CAAC,OAAQ+C,EAAMxD,EAAeQ,KAC9CT,EAAKC,EAAgBwD,EAAMhD,GAC3BA,EAAIgD,EAKRlD,EAAWG,KAAK,CAAC,eAAgBX,EAAG,KApEtC2D,CAASzD,EADIA,EAAeH,OACKS,GACjC,IAAMK,EAAcN,EAAME,QAAQK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAErD,OADAC,QAAQC,IAAI,yBAA0BtB,EAAQiB,EAAaX,IACpDM,ECRF,SAASoD,EAA0BrD,GACxC,IAAIC,EAAa,GACbN,EAAiBK,EAAME,SAM7B,SAAsBP,EAAgBM,GACpC,IAAIqD,GAAU,EACVC,EAAQ,EACRC,EAAM7D,EAAeH,OAAS,EAClC,KAAO8D,GAAS,CACdA,GAAU,EACV,IAAK,IAAI7D,EAAI8D,EAAO9D,EAAI+D,EAAK/D,IAC3BQ,EAAWG,KAAK,CAAC,eAAgBX,EAAGA,EAAI,IACxCQ,EAAWG,KAAK,CAAC,eAAgBX,EAAI,EAAGA,IACxCQ,EAAWG,KAAK,CAAC,eAAgBX,EAAGA,EAAI,IACxCQ,EAAWG,KAAK,CAAC,eAAgBX,EAAI,EAAGA,IACpCE,EAAeF,GAAKE,EAAeF,EAAI,KACzCQ,EAAWG,KAAK,CAAC,OAAQX,EAAGE,EAAeF,EAAI,KAC/CQ,EAAWG,KAAK,CAAC,OAAQX,EAAI,EAAGE,EAAeF,KAC/CC,EAAKC,EAAgBF,EAAGA,EAAI,GAC5B6D,GAAU,GAGd,IAAKA,EACH,MAEFA,GAAU,EAEV,IAAK,IAAI7D,IADP+D,EACiB,EAAG/D,GAAK8D,IAAS9D,EAClCQ,EAAWG,KAAK,CAAC,eAAgBX,EAAGA,EAAI,IACxCQ,EAAWG,KAAK,CAAC,eAAgBX,EAAI,EAAGA,IACxCQ,EAAWG,KAAK,CAAC,eAAgBX,EAAGA,EAAI,IACxCQ,EAAWG,KAAK,CAAC,eAAgBX,EAAI,EAAGA,IACpCE,EAAeF,GAAKE,EAAeF,EAAI,KACzCQ,EAAWG,KAAK,CAAC,OAAQX,EAAGE,EAAeF,EAAI,KAC/CQ,EAAWG,KAAK,CAAC,OAAQX,EAAI,EAAGE,EAAeF,KAC/CC,EAAKC,EAAgBF,EAAGA,EAAI,GAC5B6D,GAAU,GAGdC,KAxCFE,CAAa9D,EAAgBM,GAC7B,IAAMK,EAAcN,EAAME,QAAQK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAErD,OADAC,QAAQC,IAAI,yBAA0BtB,EAAQiB,EAAaX,IACpDM,ECIT,IAAIyD,EAAeC,OAAOC,WACtBC,EAAgBF,OAAOG,YACvBC,EAAgBC,SAASN,EAAe,KAO5CC,OAAOM,SALP,WACEP,EAAeC,OAAOC,WACtBC,EAAgBF,OAAOG,YACvBC,EAAgBC,SAASN,EAAe,MAI1C,IAMIQ,EAAqB,GAmTVC,M,YAhTb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXrE,MAAO,GACPsE,cAAe,CACb,OACA,YACA,aACA,gBACA,YACA,gBACA,YACA,sBACA,YACA,WACA,gBAEFC,SAAS,GAjBM,E,iFAqBjBC,KAAKC,e,mCAGLD,KAAKE,SAAS,CACZH,SAAUC,KAAKH,MAAME,Y,mCAKvB,IADA,IA+Q2BI,EAAKC,EA/Q1B5E,EAAQ,GACLP,EAAI,EAAGA,EAAIsE,EAAetE,IACjCO,EAAMI,MA6QmBuE,EA7QQ,GA6QHC,EA7QOf,EAAgB,GA8QlDhC,KAAKC,MAAMD,KAAKgD,UAAYD,EAAMD,EAAM,GAAKA,KA5QlDH,KAAKE,SAAS,CAAE1E,MAAOA,IACvBwE,KAAKM,mB,yCAGYC,GACjB,IAAK,IAAItF,EAAI,EAAGA,EAAI+E,KAAKH,MAAMC,cAAc9E,SAAUC,EAAG,CACxDuF,SAASC,eAAeT,KAAKH,MAAMC,cAAc7E,IAAIyF,UAAW,EAChE,IAAMC,EAAcH,SAASC,eAAeT,KAAKH,MAAMC,cAAc7E,IAClE2F,MACHD,EAAYE,WAAa,QACzBF,EAAYG,MACVP,IAAkBP,KAAKH,MAAMC,cAAc7E,GAAK,UAAY,QAC9D0F,EAAYI,OAAS,a,wCAKvBP,SAASC,eAAe,aAAaC,UAAW,EAChD,IAAMM,EAAcR,SAASC,eAAe,aAAaG,MACzDI,EAAYH,WAAa,UACzBG,EAAYF,MAAQ,QACpBE,EAAYD,OAAS,UAErBP,SAASC,eAAe,QAAQC,UAAW,EAC3C,IAAMO,EAAaT,SAASC,eAAe,QAAQG,MACnDK,EAAWJ,WAAa,UACxBI,EAAWH,MAAQ,QACnBG,EAAWF,OAAS,Y,uCAIpB,IAAK,IAAI9F,EAAI,EAAGA,EAAI+E,KAAKH,MAAMC,cAAc9E,SAAUC,EAAG,CACxDuF,SAASC,eAAeT,KAAKH,MAAMC,cAAc7E,IAAIyF,UAAW,EAChE,IAAMC,EAAcH,SAASC,eAAeT,KAAKH,MAAMC,cAAc7E,IAClE2F,MACHD,EAAYE,WAAa,UACzBF,EAAYG,MAAQ,QACpBH,EAAYI,OAAS,a,2BAIpBG,GAAmB,IAAD,OACrBlB,KAAKmB,mBAAmBD,GACxB,IAAIzF,EAAaF,EAAwByE,KAAKH,MAAMrE,OACpDkE,EAAqB,IACI,kBAArBwB,GACFzF,EAAaW,EAA2B4D,KAAKH,MAAMrE,OACnDkE,EAAqB,IACS,cAArBwB,GACTzF,EAAac,EAAuByD,KAAKH,MAAMrE,OAC/CkE,EAAqB,IACS,kBAArBwB,GACTzF,EAAaqB,EAA2BkD,KAAKH,MAAMrE,OACnDkE,EAAqB,IACS,cAArBwB,GACTzF,EAAauB,EAAuBgD,KAAKH,MAAMrE,OAC/CkE,EAAqB,KACS,wBAArBwB,GACTzF,EAAamC,EAAiCoC,KAAKH,MAAMrE,OACzDkE,EAAqB,KACS,cAArBwB,GACTzF,EAAa2C,EAAuB4B,KAAKH,MAAMrE,OAC/CkE,EAAqB,IACS,aAArBwB,GACTzF,EAAagD,EAAsBuB,KAAKH,MAAMrE,OAC9CkE,EAAqB,IACS,iBAArBwB,IACTzF,EAAaoD,EAA0BmB,KAAKH,MAAMrE,OAClDkE,EAAqB,KAEvB,IAAK,IAAIzE,EAAI,EAAGA,EAAIQ,EAAWT,OAAQC,IAAK,CAC1C,IAAMmG,EACiB,iBAArB3F,EAAWR,GAAG,IACO,iBAArBQ,EAAWR,GAAG,GACVoG,EAAYb,SAASc,uBAAuB,aAC5CC,EAAOf,SAASc,uBAAuB,QACvB,IAAlBF,EAAyB,WAC3B,IAAMN,EACiB,iBAArBrF,EAAWR,GAAG,GAvHA,MADF,QAyHRyD,EACiB,iBAArBjD,EAAWR,GAAG,IAAyB,EAAK4E,MAAME,QArHrC,MADF,QAkHa,cAOetE,EAAWR,GAP1B,GAObuG,GAPa,WAOAC,EAPA,KAQpBC,EAASH,EAAKC,GAAaZ,MAC3Be,EAASJ,EAAKE,GAAab,MAC3BgB,EAAc,EAAK/B,MAAME,QAC3BwB,EAAKC,GAAaZ,MAClBS,EAAUG,GAAaZ,MACrBiB,EAAc,EAAKhC,MAAME,QAC3BwB,EAAKE,GAAab,MAClBS,EAAUI,GAAab,MAC3BkB,YAAW,WACJ,EAAKjC,MAAME,UACd6B,EAAYG,gBAAkBjB,EAC9Be,EAAYE,gBAAkBjB,GAEhCY,EAAOK,gBAAkBjB,EACzBY,EAAOM,OAAStD,EAChBgD,EAAOO,MAAQvD,EACfiD,EAAOI,gBAAkBjB,EACzBa,EAAOK,OAAStD,EAChBiD,EAAOM,MAAQvD,IACdzD,EAAIyE,GA3BoB,GA4BrB,WAAD,kBAC+BjE,EAAWR,GAD1C,GACQiH,GADR,WACkBC,EADlB,KAECC,EAAWf,EAAUa,GAAUtB,MACrCkB,YAAW,WACTM,EAASJ,OAAT,UAAqBG,EAArB,QACClH,EAAIyE,GALD,GAQV,IAAM2C,EAAe7C,SAASE,EAAqBjE,EAAWT,QAC9D8G,YAAW,kBAAM,EAAKQ,oBAAmBD,K,+BAEjC,IAAD,OACD7G,EAAQwE,KAAKH,MAAMrE,MAGzB,OACE,oCACE,yBACE+G,UAAU,kBACV3B,MAAO,CAAE4B,SAAU,WAAYrF,MAAM,SAEpC3B,EAAMiH,KAAI,SAACC,EAAOC,GAAR,OACT,yBACEJ,UAAU,YACVK,IAAKD,EACL/B,MAAO,CACLmB,gBAAiB,EAAKlC,MAAME,QAzKd,QAHR,QA+KNiC,OAAO,GAAD,OAAKU,EAAL,QAGR,yBACEH,UAAU,MACVK,IAAKD,EACL/B,MAAO,CACLmB,gBAtLI,QAuLJC,OAnLG,QAoLHC,MApLG,gBA2Lb,yBAAKM,UAAU,WACb,4BACEM,GAAG,YACHjC,MAAO,CACL4B,SAAU,WACVM,IAAI,GAAD,OAAM,GAAKzD,EAAgB,IApClB,EAoCT,OAEL0D,QAAS,kBAAM,EAAK9C,eANtB,uBAWA,4BACE4C,GAAG,OACHjC,MAAO,CACL4B,SAAU,WACVM,IAAI,GAAD,OAAM,KAAQzD,EAAgB,IA/CrB,EA+CT,OAEL0D,QAAS,kBAAM,EAAKC,eANtB,uBAUA,4BACEH,GAAG,sBACHjC,MAAO,CACL4B,SAAU,WACVM,IAAI,GAAD,OAAM,KAAQzD,EAAgB,IAzDrB,EAyDT,OAEL0D,QAAS,kBAAM,EAAKhH,KAAK,yBAN3B,yBAUA,4BACE8G,GAAG,gBACHjC,MAAO,CACL4B,SAAU,WACVM,IAAI,GAAD,OAAM,MAASzD,EAAgB,IAnEtB,EAmET,OAEL0D,QAAS,kBAAM,EAAKhH,KAAK,mBAN3B,kBAUA,4BACE8G,GAAG,gBACHjC,MAAO,CACL4B,SAAU,WACVM,IAAI,GAAD,OAAM,MAASzD,EAAgB,IA7EtB,EA6ET,OAEL0D,QAAS,kBAAM,EAAKhH,KAAK,mBAN3B,kBAUA,4BACE8G,GAAG,eACHjC,MAAO,CACL4B,SAAU,WACVM,IAAI,GAAD,OAAM,MAASzD,EAAgB,IAvFtB,EAuFT,OAEL0D,QAAS,kBAAM,EAAKhH,KAAK,kBAN3B,iBAUA,4BACE8G,GAAG,aACHjC,MAAO,CACL4B,SAAU,WACVM,IAAI,GAAD,OAAM,KAAQzD,EAAgB,IAjGrB,EAiGT,OAEL0D,QAAS,kBAAM,EAAKhH,KAAK,gBAN3B,eAUA,4BACE8G,GAAG,YACHjC,MAAO,CACL4B,SAAU,WACVM,IAAI,GAAD,OAAM,KAAQzD,EAAgB,IA3GrB,EA2GT,OAEL0D,QAAS,kBAAM,EAAKhH,KAAK,eAN3B,cAUA,4BACE8G,GAAG,YACHjC,MAAO,CACL4B,SAAU,WACVM,IAAI,GAAD,OAAM,MAASzD,EAAgB,IArHtB,EAqHT,OAEL0D,QAAS,kBAAM,EAAKhH,KAAK,eAN3B,cAUA,4BACE8G,GAAG,YACHjC,MAAO,CACL4B,SAAU,WACVM,IAAI,GAAD,OAAM,KAAQzD,EAAgB,IA/HrB,EA+HT,OAEL0D,QAAS,kBAAM,EAAKhH,KAAK,eAN3B,cAUA,4BACE8G,GAAG,WACHjC,MAAO,CACL4B,SAAU,WACVM,IAAI,GAAD,OAAM,KAAQzD,EAAgB,IAzIrB,EAyIT,OAEL0D,QAAS,kBAAM,EAAKhH,KAAK,cAN3B,mB,GA7RekH,IAAMC,WCnBhBC,MARf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,Q,MCFNa,IAASC,OAAO,kBAAC,EAAD,MAAS7C,SAASC,eAAe,U","file":"static/js/main.93cf3618.chunk.js","sourcesContent":["export function isEqual(firstArray, secondArray) {\n  if (firstArray.length !== secondArray.length) {\n    return false;\n  }\n  for (let i = 0; i < firstArray.length; i++) {\n    if (firstArray[i] !== secondArray[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","export function swap(auxillaryArray, firstIndex, secondIndex) {\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n}\n","import { isEqual } from \"./helper/IsEqual\";\nimport { swap } from \"./helper/swap\";\nexport function getBubbleSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  bubbleSort(auxillaryArray, animations);\n  const sortedArray = array.slice().sort((a, b) => a - b);\n  console.log(\"sort works correctly? \", isEqual(sortedArray, auxillaryArray));\n  return animations;\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n  const length = auxillaryArray.length;\n  for (let i = 0; i < length - 1; i++) {\n    for (let j = 0; j < length - i - 1; j++) {\n      animations.push([\"comparision1\", j, j + 1]);\n      animations.push([\"comparision1\", j + 1, j]);\n      animations.push([\"comparision2\", j, j + 1]);\n      animations.push([\"comparision2\", j + 1, j]);\n\n      if (auxillaryArray[j] > auxillaryArray[j + 1]) {\n        animations.push([\"swap\", j, auxillaryArray[j + 1]]);\n        animations.push([\"swap\", j + 1, auxillaryArray[j]]);\n        swap(auxillaryArray, j, j + 1);\n      }\n    }\n  }\n}\n","import { isEqual } from \"./helper/IsEqual\";\nimport { swap } from \"./helper/swap\";\n\nexport function getSelectionSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  selectionSort(auxillaryArray, animations);\n  const sortedArray = array.slice().sort((a, b) => a - b);\n  console.log(\"sort works correctly? \", isEqual(sortedArray, auxillaryArray));\n  return animations;\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n  const length = auxillaryArray.length;\n  for (let i = 0; i < length - 1; i++) {\n    let minIndex = i;\n    for (let j = i + 1; j < length; j++) {\n      animations.push([\"comparision1\", j, minIndex]);\n      animations.push([\"comparision1\", minIndex, j]);\n      animations.push([\"comparision2\", j, minIndex]);\n      animations.push([\"comparision2\", minIndex, j]);\n\n      if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n        minIndex = j;\n      }\n    }\n    animations.push([\"comparision1\", i, minIndex]);\n    animations.push([\"comparision1\", minIndex, i]);\n    animations.push([\"comparision2\", i, minIndex]);\n    animations.push([\"comparision2\", minIndex, i]);\n    animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n    animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n    // Swap the found minimum element with the first element\n    swap(auxillaryArray, minIndex, i);\n  }\n}\n","import { isEqual } from \"./helper/IsEqual\";\nimport { swap } from \"./helper/swap\";\n\nexport function getQuickSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n  const sortedArray = array.slice().sort((a, b) => a - b);\n  console.log(\"sort works correctly? \", isEqual(sortedArray, auxillaryArray));\n  return animations;\n}\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n  let pivotIndex;\n  if (startIndex < endIndex) {\n    pivotIndex = partitionArray(\n      auxillaryArray,\n      startIndex,\n      endIndex,\n      animations\n    );\n    quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n    quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n  }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n  let pivot = auxillaryArray[endIndex];\n  let pivotIndex = startIndex;\n  for (let i = startIndex; i <= endIndex - 1; i++) {\n    animations.push([\"comparision1\", i, endIndex]);\n    animations.push([\"comparision2\", i, endIndex]);\n\n    animations.push([\"comparision1\", pivotIndex, i]);\n    animations.push([\"comparision2\", pivotIndex, i]);\n\n    if (auxillaryArray[i] <= pivot) {\n      //Swap these two heights\n      animations.push([\"swap\", i, auxillaryArray[pivotIndex]]);\n      animations.push([\"swap\", pivotIndex, auxillaryArray[i]]);\n      swap(auxillaryArray, i, pivotIndex);\n      pivotIndex++;\n    }\n  }\n  //Swap these two heights\n  animations.push([\"swap\", pivotIndex, auxillaryArray[endIndex]]);\n  animations.push([\"swap\", endIndex, auxillaryArray[pivotIndex]]);\n  swap(auxillaryArray, pivotIndex, endIndex);\n  return pivotIndex;\n}\n","import { isEqual } from \"./helper/IsEqual\";\nimport { swap } from \"./helper/swap\";\nexport function getInsertionSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  insertionSort(auxillaryArray, animations);\n  const sortedArray = array.slice().sort((a, b) => a - b);\n  console.log(\"sort works correctly? \", isEqual(sortedArray, auxillaryArray));\n  return animations;\n}\n\nfunction insertionSort(auxillaryArray, animations) {\n  let length = auxillaryArray.length;\n  for (let i = 1; i < length; i++) {\n    let j = i;\n    while (j > 0 && auxillaryArray[j] < auxillaryArray[j - 1]) {\n      animations.push([\"comparision1\", j - 1, j]);\n      animations.push([\"comparision1\", j, j - 1]);\n      animations.push([\"comparision2\", j - 1, j]);\n      animations.push([\"comparision2\", j, j - 1]);\n\n      animations.push([\"swap\", j - 1, auxillaryArray[j]]);\n      animations.push([\"swap\", j, auxillaryArray[j - 1]]);\n      swap(auxillaryArray, j - 1, j);\n      j -= 1;\n    }\n  }\n}\n","import { isEqual } from \"./helper/IsEqual\";\n\nexport function getMergeSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  MergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n  const sortedArray = array.slice().sort((a, b) => a - b);\n  console.log(\"sort works correctly? \", isEqual(sortedArray, auxillaryArray));\n  return animations;\n}\nfunction MergeSort(auxillaryArray, left, right, animations) {\n  if (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    MergeSort(auxillaryArray, left, mid, animations);\n    MergeSort(auxillaryArray, mid + 1, right, animations);\n    Merge(auxillaryArray, left, mid, right, animations);\n  }\n}\n\nfunction Merge(auxillaryArray, l, m, r, animations) {\n  let left = auxillaryArray.slice(l, m + 1);\n  let right = auxillaryArray.slice(m + 1, r + 1);\n  let index = l;\n  let i = 0;\n  let j = 0;\n  while (i < left.length && j < right.length) {\n    // animations.push([\"comparision1\", i, j]);\n    // animations.push([\"comparision2\", i, j]);\n    if (left[i] < right[j]) {\n      animations.push([\"comparision1\", index, i]);\n      animations.push([\"comparision1\", i, index]);\n      animations.push([\"comparision2\", index, i]);\n      animations.push([\"comparision2\", i, index]);\n\n      animations.push([\"swap\", index, left[i]]);\n      auxillaryArray[index] = left[i];\n      i += 1;\n    } else {\n      animations.push([\"comparision1\", index, j]);\n      animations.push([\"comparision1\", j, index]);\n      animations.push([\"comparision2\", index, j]);\n      animations.push([\"comparision2\", j, index]);\n\n      animations.push([\"swap\", index, right[j]]);\n      auxillaryArray[index] = right[j];\n      j += 1;\n    }\n    index += 1;\n  }\n  while (i < left.length) {\n    animations.push([\"swap\", index, left[i]]);\n    auxillaryArray[index] = left[i];\n    i += 1;\n    index += 1;\n  }\n  while (j < right.length) {\n    animations.push([\"swap\", index, right[j]]);\n    auxillaryArray[index] = right[j];\n    j += 1;\n    index += 1;\n  }\n}\n","import { isEqual } from \"./helper/IsEqual\";\n\nexport function getBinaryInsertionSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  binaryInsertionSort(auxillaryArray, animations);\n  const sortedArray = array.slice().sort((a, b) => a - b);\n  console.log(\"sort works correctly? \", isEqual(sortedArray, auxillaryArray));\n  return animations;\n}\nfunction binaryInsertionSort(auxillaryArray, animations) {\n  let i, loc, j, selected;\n  for (i = 1; i < auxillaryArray.length; i++) {\n    j = i - 1;\n    selected = auxillaryArray[i];\n    loc = binarySearch(auxillaryArray, selected, 0, j);\n    while (j >= loc) {\n      animations.push([\"comparision1\", j, loc]);\n      animations.push([\"comparision1\", loc, j]);\n      animations.push([\"comparision2\", j, loc]);\n      animations.push([\"comparision2\", loc, j]);\n      animations.push([\"swap\", j + 1, auxillaryArray[j]]);\n      auxillaryArray[j + 1] = auxillaryArray[j];\n      j -= 1;\n    }\n    animations.push([\"swap\", j + 1, selected]);\n    auxillaryArray[j + 1] = selected;\n  }\n}\nfunction binarySearch(auxillaryArray, item, low, high) {\n  if (high <= low) {\n    if (item > auxillaryArray[low]) {\n      return low + 1;\n    }\n    return low;\n  }\n  let mid = Math.floor((high + low) / 2);\n  if (item === auxillaryArray[mid]) {\n    return mid + 1;\n  }\n  if (item > auxillaryArray[mid]) {\n    return binarySearch(auxillaryArray, item, mid + 1, high);\n  }\n  return binarySearch(auxillaryArray, item, low, mid - 1);\n}\n","import { isEqual } from \"./helper/IsEqual\";\n\nexport function getRadixSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  RadixSort(auxillaryArray, animations);\n  const sortedArray = array.slice().sort((a, b) => a - b);\n  console.log(\"sort works correctly? \", isEqual(sortedArray, auxillaryArray));\n  return animations;\n}\nfunction RadixSort(auxillaryArray, animations) {\n  let count = [];\n  let mx = auxillaryArray[0];\n  let c = 0;\n  for (let i = 0; i < auxillaryArray.length; ++i) {\n    if (auxillaryArray[i] > mx) {\n      mx = auxillaryArray[i];\n    }\n  }\n  for (let m = 1; Math.floor(mx / m) > 0; m *= 10) {\n    count = [[], [], [], [], [], [], [], [], [], []];\n    for (let i = 0; i < auxillaryArray.length; i++) {\n      let temp = Math.floor(auxillaryArray[i] / m) % 10;\n      count[temp].push(auxillaryArray[i]);\n      animations.push([\"comparision1\", i, temp]);\n      animations.push([\"comparision1\", temp, i]);\n      animations.push([\"comparision2\", i, temp]);\n      animations.push([\"comparision2\", temp, i]);\n    }\n    c = 0;\n    for (let i = 0; i < 10; ++i) {\n      for (let j = 0; j < count[i].length; ++j) {\n        animations.push([\"comparision1\", c, i + j]);\n        animations.push([\"comparision1\", i + j, c]);\n        animations.push([\"comparision2\", c, i + j]);\n        animations.push([\"comparision2\", i + j, c]);\n        animations.push([\"swap\", c, count[i][j]]);\n        auxillaryArray[c] = count[i][j];\n        ++c;\n      }\n    }\n  }\n}\n","import { isEqual } from \"./helper/IsEqual\";\nimport { swap } from \"./helper/swap\";\n\nexport function getHeapSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  let length = auxillaryArray.length;\n  HeapSort(auxillaryArray, length, animations);\n  const sortedArray = array.slice().sort((a, b) => a - b);\n  console.log(\"sort works correctly? \", isEqual(sortedArray, auxillaryArray));\n  return animations;\n}\n\nfunction HeapSort(auxillaryArray, size, animations) {\n  let left, right, j, newJ;\n  for (let i = Math.floor(size / 2 - 1); i >= 0; --i) {\n    animations.push([\"comparision1\", i, 0]);\n    j = newJ = i;\n    while (j < size) {\n      newJ = j;\n      left = j * 2 + 1;\n      right = j * 2 + 2;\n      if (left < size && auxillaryArray[left] > auxillaryArray[newJ]) {\n        newJ = left;\n        animations.push([\"comparision1\", newJ, left]);\n        animations.push([\"comparision2\", newJ, left]);\n      }\n      if (right < size && auxillaryArray[right] > auxillaryArray[newJ]) {\n        newJ = right;\n        animations.push([\"comparision1\", newJ, right]);\n        animations.push([\"comparision2\", newJ, right]);\n      }\n      if (newJ !== j) {\n        animations.push([\"swap\", j, auxillaryArray[newJ]]);\n        animations.push([\"swap\", newJ, auxillaryArray[j]]);\n        swap(auxillaryArray, j, newJ);\n        j = newJ;\n      } else {\n        break;\n      }\n    }\n    animations.push([\"comparision2\", i, 0]);\n  }\n  for (let i = size - 1; i >= 0; --i) {\n    animations.push([\"comparision1\", i, 0]);\n    animations.push([\"swap\", 0, auxillaryArray[i]]);\n    animations.push([\"swap\", i, auxillaryArray[0]]);\n    swap(auxillaryArray, i, 0);\n    j = newJ = 0;\n    while (j < i) {\n      newJ = j;\n      left = j * 2 + 1;\n      right = j * 2 + 2;\n      if (left < i && auxillaryArray[left] > auxillaryArray[newJ]) {\n        animations.push([\"comparision1\", newJ, left]);\n        animations.push([\"comparision2\", newJ, left]);\n        newJ = left;\n      }\n      if (right < i && auxillaryArray[right] > auxillaryArray[newJ]) {\n        animations.push([\"comparision1\", newJ, right]);\n        animations.push([\"comparision2\", newJ, right]);\n\n        newJ = right;\n      }\n      if (newJ !== j) {\n        animations.push([\"comparision1\", j, newJ]);\n        animations.push([\"comparision2\", j, newJ]);\n        animations.push([\"swap\", j, auxillaryArray[newJ]]);\n        animations.push([\"swap\", newJ, auxillaryArray[j]]);\n        swap(auxillaryArray, newJ, j);\n        j = newJ;\n      } else {\n        break;\n      }\n    }\n    animations.push([\"comparision2\", i, 0]);\n  }\n}\n","import { isEqual } from \"./helper/IsEqual\";\nimport { swap } from \"./helper/swap\";\nexport function getCocktailSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  cocktailSort(auxillaryArray, animations);\n  const sortedArray = array.slice().sort((a, b) => a - b);\n  console.log(\"sort works correctly? \", isEqual(sortedArray, auxillaryArray));\n  return animations;\n}\nfunction cocktailSort(auxillaryArray, animations) {\n  let swapped = true;\n  let start = 0;\n  let end = auxillaryArray.length - 1;\n  while (swapped) {\n    swapped = false;\n    for (let i = start; i < end; i++) {\n      animations.push([\"comparision1\", i, i + 1]);\n      animations.push([\"comparision1\", i + 1, i]);\n      animations.push([\"comparision2\", i, i + 1]);\n      animations.push([\"comparision2\", i + 1, i]);\n      if (auxillaryArray[i] > auxillaryArray[i + 1]) {\n        animations.push([\"swap\", i, auxillaryArray[i + 1]]);\n        animations.push([\"swap\", i + 1, auxillaryArray[i]]);\n        swap(auxillaryArray, i, i + 1);\n        swapped = true;\n      }\n    }\n    if (!swapped) {\n      break;\n    }\n    swapped = false;\n    --end;\n    for (let i = end - 1; i >= start; --i) {\n      animations.push([\"comparision1\", i, i + 1]);\n      animations.push([\"comparision1\", i + 1, i]);\n      animations.push([\"comparision2\", i, i + 1]);\n      animations.push([\"comparision2\", i + 1, i]);\n      if (auxillaryArray[i] > auxillaryArray[i + 1]) {\n        animations.push([\"swap\", i, auxillaryArray[i + 1]]);\n        animations.push([\"swap\", i + 1, auxillaryArray[i]]);\n        swap(auxillaryArray, i, i + 1);\n        swapped = true;\n      }\n    }\n    start++;\n  }\n}\n","import React from \"react\";\nimport \"./Visualizer.css\";\nimport { getBubbleSortAnimations } from \"../Algorithms/BubbleSort\";\nimport { getSelectionSortAnimations } from \"../Algorithms/SelectionSort\";\nimport { getQuickSortAnimations } from \"../Algorithms/QuickSort\";\nimport { getInsertionSortAnimations } from \"../Algorithms/InsertionSort\";\nimport { getMergeSortAnimations } from \"../Algorithms/MergeSort\";\nimport { getBinaryInsertionSortAnimations } from \"../Algorithms/BinaryInsertionSort\";\nimport { getRadixSortAnimations } from \"../Algorithms/RadixSort\";\nimport { getHeapSortAnimations } from \"../Algorithms/HeapSort\";\nimport { getCocktailSortAnimations } from \"../Algorithms/CocktailSort\";\n\nlet window_width = window.innerWidth;\nlet window_height = window.innerHeight;\nlet size_of_array = parseInt(window_width / 4.2);\n\nfunction reportWindowSize() {\n  window_width = window.innerWidth;\n  window_height = window.innerHeight;\n  size_of_array = parseInt(window_width / 4.2);\n}\nwindow.onresize = reportWindowSize;\n\nconst Primary_color = \"white\";\nconst Secondary_color = \"red\";\n\nconst Primary_color_for_dot = \"black\";\nconst Primary_size = \"1.7px\";\nconst Secondary_size = \"8px\";\nlet Animation_speed_ms = 0.1;\n\nclass Visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      algorithmSets: [\n        \"Mode\",\n        \"Shuffling\",\n        \"BubbleSort\",\n        \"SelectionSort\",\n        \"QuickSort\",\n        \"InsertionSort\",\n        \"MergeSort\",\n        \"BinaryInsertionSort\",\n        \"RadixSort\",\n        \"HeapSort\",\n        \"CocktailSort\"\n      ],\n      dotPick: true\n    };\n  }\n  componentDidMount() {\n    this.resetArray();\n  }\n  selectMode() {\n    this.setState({\n      dotPick: !this.state.dotPick\n    });\n  }\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < size_of_array; i++) {\n      array.push(randomIntFromInterval(15, window_height - 20));\n    }\n    this.setState({ array: array });\n    this.restoreButtons();\n  }\n\n  disableSortButtons(algorithmName) {\n    for (let i = 0; i < this.state.algorithmSets.length; ++i) {\n      document.getElementById(this.state.algorithmSets[i]).disabled = true;\n      const buttonStyle = document.getElementById(this.state.algorithmSets[i])\n        .style;\n      buttonStyle.background = \"black\";\n      buttonStyle.color =\n        algorithmName === this.state.algorithmSets[i] ? \"#3e8e41\" : \"black\";\n      buttonStyle.cursor = \"default\";\n    }\n  }\n\n  restoreShffling() {\n    document.getElementById(\"Shuffling\").disabled = false;\n    const shuffButton = document.getElementById(\"Shuffling\").style;\n    shuffButton.background = \"#47535E\";\n    shuffButton.color = \"white\";\n    shuffButton.cursor = \"pointer\";\n\n    document.getElementById(\"Mode\").disabled = false;\n    const modeButton = document.getElementById(\"Mode\").style;\n    modeButton.background = \"#47535E\";\n    modeButton.color = \"white\";\n    modeButton.cursor = \"pointer\";\n  }\n\n  restoreButtons() {\n    for (let i = 0; i < this.state.algorithmSets.length; ++i) {\n      document.getElementById(this.state.algorithmSets[i]).disabled = false;\n      const buttonStyle = document.getElementById(this.state.algorithmSets[i])\n        .style;\n      buttonStyle.background = \"#47535E\";\n      buttonStyle.color = \"white\";\n      buttonStyle.cursor = \"pointer\";\n    }\n  }\n\n  sort(sortingAlgorithm) {\n    this.disableSortButtons(sortingAlgorithm);\n    let animations = getBubbleSortAnimations(this.state.array);\n    Animation_speed_ms = 0.25;\n    if (sortingAlgorithm === \"SelectionSort\") {\n      animations = getSelectionSortAnimations(this.state.array);\n      Animation_speed_ms = 0.3;\n    } else if (sortingAlgorithm === \"QuickSort\") {\n      animations = getQuickSortAnimations(this.state.array);\n      Animation_speed_ms = 0.8;\n    } else if (sortingAlgorithm === \"InsertionSort\") {\n      animations = getInsertionSortAnimations(this.state.array);\n      Animation_speed_ms = 0.4;\n    } else if (sortingAlgorithm === \"MergeSort\") {\n      animations = getMergeSortAnimations(this.state.array);\n      Animation_speed_ms = 1.1;\n    } else if (sortingAlgorithm === \"BinaryInsertionSort\") {\n      animations = getBinaryInsertionSortAnimations(this.state.array);\n      Animation_speed_ms = 0.25;\n    } else if (sortingAlgorithm === \"RadixSort\") {\n      animations = getRadixSortAnimations(this.state.array);\n      Animation_speed_ms = 0.7;\n    } else if (sortingAlgorithm === \"HeapSort\") {\n      animations = getHeapSortAnimations(this.state.array);\n      Animation_speed_ms = 0.7;\n    } else if (sortingAlgorithm === \"CocktailSort\") {\n      animations = getCocktailSortAnimations(this.state.array);\n      Animation_speed_ms = 0.15;\n    }\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange =\n        animations[i][0] === \"comparision1\" ||\n        animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const dots = document.getElementsByClassName(\"dot\");\n      if (isColorChange === true) {\n        const color =\n          animations[i][0] === \"comparision1\" ? Secondary_color : Primary_color;\n        const size =\n          animations[i][0] === \"comparision1\" && this.state.dotPick\n            ? Secondary_size\n            : Primary_size;\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\n        const dotOne = dots[barOneIndex].style;\n        const dotTwo = dots[barTwoIndex].style;\n        const barOneStyle = this.state.dotPick\n          ? dots[barOneIndex].style\n          : arrayBars[barOneIndex].style;\n        const barTwoStyle = this.state.dotPick\n          ? dots[barTwoIndex].style\n          : arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          if (!this.state.dotPick) {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }\n          dotOne.backgroundColor = color;\n          dotOne.height = size;\n          dotOne.width = size;\n          dotTwo.backgroundColor = color;\n          dotTwo.height = size;\n          dotTwo.width = size;\n        }, i * Animation_speed_ms);\n      } else {\n        const [temp, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * Animation_speed_ms);\n      }\n    }\n    const Restore_time = parseInt(Animation_speed_ms * animations.length);\n    setTimeout(() => this.restoreShffling(), Restore_time);\n  }\n  render() {\n    const array = this.state.array;\n    const Sorting_buttons = 6;\n    const Total_buttons = 2 + Sorting_buttons;\n    return (\n      <>\n        <div\n          className=\"array-container\"\n          style={{ position: \"absolute\", right: `20px` }}\n        >\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: this.state.dotPick\n                  ? Primary_color_for_dot\n                  : Primary_color,\n                height: `${value}px`\n              }}\n            >\n              <div\n                className=\"dot\"\n                key={idx}\n                style={{\n                  backgroundColor: Primary_color,\n                  height: Primary_size,\n                  width: Primary_size\n                }}\n              ></div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"buttons\">\n          <button\n            id=\"Shuffling\"\n            style={{\n              position: \"relative\",\n              top: `${(0 * (window_height - 20)) / Total_buttons}px`\n            }}\n            onClick={() => this.resetArray()}\n          >\n            Shuffling The Array\n          </button>\n\n          <button\n            id=\"Mode\"\n            style={{\n              position: \"relative\",\n              top: `${(0.01 * (window_height - 20)) / Total_buttons}px`\n            }}\n            onClick={() => this.selectMode()}\n          >\n            Change Display Mode\n          </button>\n          <button\n            id=\"BinaryInsertionSort\"\n            style={{\n              position: \"relative\",\n              top: `${(0.02 * (window_height - 20)) / Total_buttons}px`\n            }}\n            onClick={() => this.sort(\"BinaryInsertionSort\")}\n          >\n            Binary Insertion Sort\n          </button>\n          <button\n            id=\"SelectionSort\"\n            style={{\n              position: \"relative\",\n              top: `${(0.035 * (window_height - 20)) / Total_buttons}px`\n            }}\n            onClick={() => this.sort(\"SelectionSort\")}\n          >\n            Selection Sort\n          </button>\n          <button\n            id=\"InsertionSort\"\n            style={{\n              position: \"relative\",\n              top: `${(0.045 * (window_height - 20)) / Total_buttons}px`\n            }}\n            onClick={() => this.sort(\"InsertionSort\")}\n          >\n            Insertion Sort\n          </button>\n          <button\n            id=\"CocktailSort\"\n            style={{\n              position: \"relative\",\n              top: `${(0.055 * (window_height - 20)) / Total_buttons}px`\n            }}\n            onClick={() => this.sort(\"CocktailSort\")}\n          >\n            Cocktail Sort\n          </button>\n          <button\n            id=\"BubbleSort\"\n            style={{\n              position: \"relative\",\n              top: `${(0.07 * (window_height - 20)) / Total_buttons}px`\n            }}\n            onClick={() => this.sort(\"BubbleSort\")}\n          >\n            Bubble Sort\n          </button>\n          <button\n            id=\"MergeSort\"\n            style={{\n              position: \"relative\",\n              top: `${(0.08 * (window_height - 20)) / Total_buttons}px`\n            }}\n            onClick={() => this.sort(\"MergeSort\")}\n          >\n            Merge Sort\n          </button>\n          <button\n            id=\"QuickSort\"\n            style={{\n              position: \"relative\",\n              top: `${(0.095 * (window_height - 20)) / Total_buttons}px`\n            }}\n            onClick={() => this.sort(\"QuickSort\")}\n          >\n            Quick Sort\n          </button>\n          <button\n            id=\"RadixSort\"\n            style={{\n              position: \"relative\",\n              top: `${(0.11 * (window_height - 20)) / Total_buttons}px`\n            }}\n            onClick={() => this.sort(\"RadixSort\")}\n          >\n            Radix Sort\n          </button>\n          <button\n            id=\"HeapSort\"\n            style={{\n              position: \"relative\",\n              top: `${(0.12 * (window_height - 20)) / Total_buttons}px`\n            }}\n            onClick={() => this.sort(\"HeapSort\")}\n          >\n            Heap Sort\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default Visualizer;\n","import React from \"react\";\nimport \"./App.css\";\nimport Visualizer from \"./Visualizer/Visualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}